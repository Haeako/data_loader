11a12
> #include <complex.h>
69a71
> /* ================================= var define ============================*/
71c73,81
< 
---
> int fd;
> struct stat st;
> void *map = nullptr;
> spng_ctx *ctx = nullptr;
> size_t file_size;
> spng_format fmt = SPNG_FMT_RGB8;
> size_t out_size;
> int flags = 0 ;
> int height, width;
72a83,84
> std::vector<uint8_t>&  out_buf = g_buffer_pool.get_buffer();
> 
74c86,87
<     int fd = open(filename.c_str(), O_RDONLY);
---
>     // auto start = std::chrono::high_resolution_clock::now();
>     fd= open(filename.c_str(), O_RDONLY );
77,79c90,96
<     struct stat st;
<     if (fstat(fd, &st) < 0) { perror("fstat"); close(fd); return {}; }
<     size_t file_size = st.st_size;
---
>     if (fstat(fd, &st) < 0) {
>         std::cout << "fstat failed: " << strerror(errno) << std::endl; 
>         perror("fstat"); 
>         close(fd);
>          return {}; 
>     }
>     file_size = st.st_size;
81c98
<     void *map = mmap(nullptr, file_size, PROT_READ, MAP_PRIVATE, fd, 0);
---
>     map = mmap(nullptr, file_size, PROT_READ, MAP_PRIVATE, fd, 0);
83,90c100,110
<     if (map == MAP_FAILED) { perror("mmap"); return {}; }
< 
<     spng_ctx *ctx = spng_ctx_new(SPNG_CTX_IGNORE_ADLER32);
<     if (!ctx) {
<         std::cerr << "Failed to create SPNG context" << std::endl;
<         munmap(map, file_size);
<         return {};
<     }
---
>     // if (map == MAP_FAILED) {
>     //     std::cerr << "mmap failed: " << strerror(errno) << std::endl;
>     //      perror("mmap"); return {}; 
>     //     }
> 
>     ctx = spng_ctx_new(SPNG_CTX_IGNORE_ADLER32);
>     // if (!ctx) {
>     //     std::cerr << "Failed to create SPNG context" << std::endl;
>     //     munmap(map, file_size);
>     //     return {};
>     // }
97,102c117,123
<     if (spng_get_ihdr(ctx, &ihdr)) {
<         std::cerr << "spng_get_ihdr failed" << std::endl;
<         spng_ctx_free(ctx);
<         munmap(map, file_size);
<         return {};
<     }
---
>     spng_get_ihdr(ctx, &ihdr);
>     // if ()) {
>     //     std::cerr << "spng_get_ihdr failed" << std::endl;
>     //     spng_ctx_free(ctx);
>     //     munmap(map, file_size);
>     //     return {};
>     // }
105c126
<     auto& out_buf = g_buffer_pool.get_buffer();
---
>     out_buf = g_buffer_pool.get_buffer();
107,108d127
<     spng_format fmt = SPNG_FMT_RGB8;
<     size_t out_size;
114c133
< 
---
>     
116c135
<     int flags = SPNG_DECODE_TRNS | SPNG_DECODE_GAMMA;
---
>     auto start = std::chrono::high_resolution_clock::now();
118,125c137,147
<     if (err != 0) {
<         const char* msg = spng_strerror(err);
<         std::cerr << "spng_decode_image failed: " << msg << std::endl;
<         spng_ctx_free(ctx);
<         munmap(map, file_size);
<         g_buffer_pool.release_buffer(out_buf);
<         return {};
<     }
---
>     auto end = std::chrono::high_resolution_clock::now();
>     std::chrono::duration<double> elapsed = end - start;
>     std::cout << "Decode time: " << elapsed.count() << " seconds" << std::endl;
>     // if (err != 0) {
>     //     const char* msg = spng_strerror(err);
>     //     std::cerr << "spng_decode_image failed: " << msg << std::endl;
>     //     spng_ctx_free(ctx);
>     //     munmap(map, file_size);
>     //     g_buffer_pool.release_buffer(out_buf);
>     //     return {};
>     // }
130,131c152,153
<     int width = ihdr.width;
<     int height = ihdr.height;
---
>     width = ihdr.width;
>     height = ihdr.height;
135c157
<     cv::Mat result = img_rgb.clone();  // Clone to copy data
---
>     // cv::Mat result = img_rgb.clone();  // Clone to copy data
139,140c161,164
<     
<     return result;
---
>     // auto end = std::chrono::high_resolution_clock::now();
>     // std::chrono::duration<double> elapsed = end - start;
>     // std::cout << "Decode time: " << elapsed.count() << " seconds" << std::endl;
>     return img_rgb;
153c177
<     GPUBufferManager(int initial_width = 1920, int initial_height = 1080) {
---
>     GPUBufferManager(int initial_width = 3220, int initial_height = 3080) {
215,222c239,246
<     // Collect all image paths first
<     std::vector<std::string> image_paths;
<     for (const auto &entry : std::filesystem::directory_iterator(folder)) {
<         if (!entry.is_regular_file()) continue;
<         if (entry.path().extension() == ".png") {
<             image_paths.push_back(entry.path().string());
<         }
<     }
---
>     // // Collect all image paths first
>     // std::vector<std::string> image_paths;
>     // for () {
>     //     if (!entry.is_regular_file()) continue;
>     //     if (entry.path().extension() == ".png") {
>     //         image_paths.push_back(entry.path().string());
>     //     }
>     // }
224a249
>     cv::cuda::GpuMat gpu_input, gpu_rgb, gpu_resized;
225a251,254
>     void* ptr;
>     for (const auto &entry : std::filesystem::directory_iterator(folder)) {
>         cv::Mat img = decode_png_spng(entry.path().string());
>         // if (img.empty()) continue;
227,230c256
<     for (const auto& path : image_paths) {
<         cv::Mat img = decode_png_spng(path);
<         if (img.empty()) continue;
< 
---
>         // auto start = std::chrono::high_resolution_clock::now();
235,237c261,263
<         auto& gpu_input = gpu_buffers.get_input_buffer();
<         auto& gpu_rgb = gpu_buffers.get_rgb_buffer();
<         auto& gpu_resized = gpu_buffers.get_resized_buffer();
---
>         gpu_input = gpu_buffers.get_input_buffer();
>         gpu_rgb = gpu_buffers.get_rgb_buffer();
>         gpu_resized = gpu_buffers.get_resized_buffer();
244c270
<                       0, 0, cv::INTER_CUBIC, cv_stream);
---
>                       0, 0, cv::INTER_NEAREST, cv_stream);
250,251c276,279
< 
<         auto ptr = static_cast<void*>(gpu_resized.ptr<uchar>());
---
>         // auto end = std::chrono::high_resolution_clock::now();
>         // std::chrono::duration<double> elapsed = end - start;
>         // std::cout << "Processing time: " << elapsed.count() << " seconds" << std::endl;
>         ptr = static_cast<void*>(gpu_resized.ptr<uchar>());
255c283
<                     .to(torch::kFloat16)
---
>                     .to(torch::kFloat32)
267c295
<     std::printf("Processed %d images in %.2f s -> FPS = %.2f\n", count, elapsed, fps);
---
>     std::printf("Processed images in %.2f s -> FPS = %.2f\n", elapsed, fps);
